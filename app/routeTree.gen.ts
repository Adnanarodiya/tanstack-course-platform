/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UnauthorizedImport } from './routes/unauthorized'
import { Route as UnauthenticatedImport } from './routes/unauthenticated'
import { Route as LoginImport } from './routes/login'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as LearnNotFoundImport } from './routes/learn/not-found'
import { Route as LearnNoSegmentsImport } from './routes/learn/no-segments'
import { Route as LearnAddImport } from './routes/learn/add'
import { Route as LearnSegmentIdIndexImport } from './routes/learn/$segmentId/index'
import { Route as LearnSegmentIdEditImport } from './routes/learn/$segmentId/edit'

// Create/Update Routes

const UnauthorizedRoute = UnauthorizedImport.update({
  id: '/unauthorized',
  path: '/unauthorized',
  getParentRoute: () => rootRoute,
} as any)

const UnauthenticatedRoute = UnauthenticatedImport.update({
  id: '/unauthenticated',
  path: '/unauthenticated',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const LearnNotFoundRoute = LearnNotFoundImport.update({
  id: '/learn/not-found',
  path: '/learn/not-found',
  getParentRoute: () => rootRoute,
} as any)

const LearnNoSegmentsRoute = LearnNoSegmentsImport.update({
  id: '/learn/no-segments',
  path: '/learn/no-segments',
  getParentRoute: () => rootRoute,
} as any)

const LearnAddRoute = LearnAddImport.update({
  id: '/learn/add',
  path: '/learn/add',
  getParentRoute: () => rootRoute,
} as any)

const LearnSegmentIdIndexRoute = LearnSegmentIdIndexImport.update({
  id: '/learn/$segmentId/',
  path: '/learn/$segmentId/',
  getParentRoute: () => rootRoute,
} as any)

const LearnSegmentIdEditRoute = LearnSegmentIdEditImport.update({
  id: '/learn/$segmentId/edit',
  path: '/learn/$segmentId/edit',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/unauthenticated': {
      id: '/unauthenticated'
      path: '/unauthenticated'
      fullPath: '/unauthenticated'
      preLoaderRoute: typeof UnauthenticatedImport
      parentRoute: typeof rootRoute
    }
    '/unauthorized': {
      id: '/unauthorized'
      path: '/unauthorized'
      fullPath: '/unauthorized'
      preLoaderRoute: typeof UnauthorizedImport
      parentRoute: typeof rootRoute
    }
    '/learn/add': {
      id: '/learn/add'
      path: '/learn/add'
      fullPath: '/learn/add'
      preLoaderRoute: typeof LearnAddImport
      parentRoute: typeof rootRoute
    }
    '/learn/no-segments': {
      id: '/learn/no-segments'
      path: '/learn/no-segments'
      fullPath: '/learn/no-segments'
      preLoaderRoute: typeof LearnNoSegmentsImport
      parentRoute: typeof rootRoute
    }
    '/learn/not-found': {
      id: '/learn/not-found'
      path: '/learn/not-found'
      fullPath: '/learn/not-found'
      preLoaderRoute: typeof LearnNotFoundImport
      parentRoute: typeof rootRoute
    }
    '/learn/$segmentId/edit': {
      id: '/learn/$segmentId/edit'
      path: '/learn/$segmentId/edit'
      fullPath: '/learn/$segmentId/edit'
      preLoaderRoute: typeof LearnSegmentIdEditImport
      parentRoute: typeof rootRoute
    }
    '/learn/$segmentId/': {
      id: '/learn/$segmentId/'
      path: '/learn/$segmentId'
      fullPath: '/learn/$segmentId'
      preLoaderRoute: typeof LearnSegmentIdIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/unauthenticated': typeof UnauthenticatedRoute
  '/unauthorized': typeof UnauthorizedRoute
  '/learn/add': typeof LearnAddRoute
  '/learn/no-segments': typeof LearnNoSegmentsRoute
  '/learn/not-found': typeof LearnNotFoundRoute
  '/learn/$segmentId/edit': typeof LearnSegmentIdEditRoute
  '/learn/$segmentId': typeof LearnSegmentIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/unauthenticated': typeof UnauthenticatedRoute
  '/unauthorized': typeof UnauthorizedRoute
  '/learn/add': typeof LearnAddRoute
  '/learn/no-segments': typeof LearnNoSegmentsRoute
  '/learn/not-found': typeof LearnNotFoundRoute
  '/learn/$segmentId/edit': typeof LearnSegmentIdEditRoute
  '/learn/$segmentId': typeof LearnSegmentIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/unauthenticated': typeof UnauthenticatedRoute
  '/unauthorized': typeof UnauthorizedRoute
  '/learn/add': typeof LearnAddRoute
  '/learn/no-segments': typeof LearnNoSegmentsRoute
  '/learn/not-found': typeof LearnNotFoundRoute
  '/learn/$segmentId/edit': typeof LearnSegmentIdEditRoute
  '/learn/$segmentId/': typeof LearnSegmentIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/login'
    | '/unauthenticated'
    | '/unauthorized'
    | '/learn/add'
    | '/learn/no-segments'
    | '/learn/not-found'
    | '/learn/$segmentId/edit'
    | '/learn/$segmentId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/login'
    | '/unauthenticated'
    | '/unauthorized'
    | '/learn/add'
    | '/learn/no-segments'
    | '/learn/not-found'
    | '/learn/$segmentId/edit'
    | '/learn/$segmentId'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/login'
    | '/unauthenticated'
    | '/unauthorized'
    | '/learn/add'
    | '/learn/no-segments'
    | '/learn/not-found'
    | '/learn/$segmentId/edit'
    | '/learn/$segmentId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  LoginRoute: typeof LoginRoute
  UnauthenticatedRoute: typeof UnauthenticatedRoute
  UnauthorizedRoute: typeof UnauthorizedRoute
  LearnAddRoute: typeof LearnAddRoute
  LearnNoSegmentsRoute: typeof LearnNoSegmentsRoute
  LearnNotFoundRoute: typeof LearnNotFoundRoute
  LearnSegmentIdEditRoute: typeof LearnSegmentIdEditRoute
  LearnSegmentIdIndexRoute: typeof LearnSegmentIdIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  LoginRoute: LoginRoute,
  UnauthenticatedRoute: UnauthenticatedRoute,
  UnauthorizedRoute: UnauthorizedRoute,
  LearnAddRoute: LearnAddRoute,
  LearnNoSegmentsRoute: LearnNoSegmentsRoute,
  LearnNotFoundRoute: LearnNotFoundRoute,
  LearnSegmentIdEditRoute: LearnSegmentIdEditRoute,
  LearnSegmentIdIndexRoute: LearnSegmentIdIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/login",
        "/unauthenticated",
        "/unauthorized",
        "/learn/add",
        "/learn/no-segments",
        "/learn/not-found",
        "/learn/$segmentId/edit",
        "/learn/$segmentId/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/unauthenticated": {
      "filePath": "unauthenticated.tsx"
    },
    "/unauthorized": {
      "filePath": "unauthorized.tsx"
    },
    "/learn/add": {
      "filePath": "learn/add.tsx"
    },
    "/learn/no-segments": {
      "filePath": "learn/no-segments.tsx"
    },
    "/learn/not-found": {
      "filePath": "learn/not-found.tsx"
    },
    "/learn/$segmentId/edit": {
      "filePath": "learn/$segmentId/edit.tsx"
    },
    "/learn/$segmentId/": {
      "filePath": "learn/$segmentId/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
